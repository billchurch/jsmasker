!(function (e, t) {
  'object' == typeof exports && 'object' == typeof module
    ? (module.exports = t())
    : 'function' == typeof define && define.amd
      ? define([], t)
      : 'object' == typeof exports
        ? (exports.JSMasker = t())
        : (e.JSMasker = t())
})(this, () =>
  (() => {
    var e = {
        44: (e, t, r) => {
          var n, o, i
          'undefined' != typeof globalThis
            ? globalThis
            : 'undefined' != typeof window
              ? window
              : void 0 !== r.g
                ? r.g
                : 'undefined' != typeof self
                  ? self
                  : Function('return this')(),
            (o = [r(32)]),
            void 0 ===
              (i =
                'function' ==
                typeof (n = function (e) {
                  function t(e) {
                    return 'string' != typeof e
                      ? e
                      : e.toLowerCase().replace(/[^a-z0-9]/g, '')
                  }
                  return (
                    e && e.applyPolyfills && e.applyPolyfills(),
                    function e(r, n = {}) {
                      const {
                          properties: o = [
                            'password',
                            'key',
                            'secret',
                            'token',
                            'privatekey',
                            'passphrase'
                          ],
                          maskLength: i = 8,
                          minLength: s = 5,
                          maxLength: a = 15,
                          maskChar: f = '*',
                          fullMask: p = !1
                        } = n,
                        u = o.map(t)
                      function l(e) {
                        return 'string' == typeof p
                          ? p
                          : !0 === p
                            ? f.repeat(e.length)
                            : (function (e, t, r, n = '*') {
                                let o = e
                                return (
                                  'random' === o &&
                                    (o =
                                      Math.floor(Math.random() * (r - t + 1)) +
                                      t),
                                  n.repeat(o)
                                )
                              })(i, s, a, f)
                      }
                      function c(t, r) {
                        return Array.isArray(t)
                          ? t.map(function (e) {
                              return c(e, r)
                            })
                          : t && 'object' == typeof t
                            ? e(t, {
                                properties: r ? [''] : o,
                                maskLength: n.maskLength,
                                minLength: n.minLength,
                                maxLength: n.maxLength,
                                maskChar: n.maskChar,
                                fullMask: n.fullMask
                              })
                            : r && 'string' == typeof t
                              ? l(t)
                              : t
                      }
                      if (Array.isArray(r))
                        return r.map(function (e) {
                          return c(e, !1)
                        })
                      if (r && 'object' == typeof r) {
                        const e = {}
                        return (
                          Object.keys(r).forEach(function (n) {
                            const o = t(n),
                              i = -1 !== u.indexOf(o)
                            e[n] = c(r[n], i)
                          }),
                          e
                        )
                      }
                      return r
                    }
                  )
                })
                  ? n.apply(t, o)
                  : n) || (e.exports = i)
        },
        32: (e) => {
          Object.entries ||
            (Object.entries = function (e) {
              return Object.keys(e).map((t) => [t, e[t]])
            }),
            Array.prototype.includes ||
              Object.defineProperty(Array.prototype, 'includes', {
                value: function (e, t) {
                  if (null == this)
                    throw new TypeError('"this" is null or not defined')
                  var r = Object(this),
                    n = r.length >>> 0
                  if (0 === n) return !1
                  for (
                    var o,
                      i,
                      s = 0 | t,
                      a = Math.max(s >= 0 ? s : n - Math.abs(s), 0);
                    a < n;

                  ) {
                    if (
                      (o = r[a]) === (i = e) ||
                      ('number' == typeof o &&
                        'number' == typeof i &&
                        isNaN(o) &&
                        isNaN(i))
                    )
                      return !0
                    a++
                  }
                  return !1
                }
              }),
            e.exports && (e.exports = { applyPolyfills() {} })
        }
      },
      t = {}
    function r(n) {
      var o = t[n]
      if (void 0 !== o) return o.exports
      var i = (t[n] = { exports: {} })
      return e[n](i, i.exports, r), i.exports
    }
    return (
      (r.g = (function () {
        if ('object' == typeof globalThis) return globalThis
        try {
          return this || new Function('return this')()
        } catch (e) {
          if ('object' == typeof window) return window
        }
      })()),
      r(44)
    )
  })()
)
